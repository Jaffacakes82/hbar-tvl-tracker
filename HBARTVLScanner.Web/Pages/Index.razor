@page "/"


<PageTitle>Stader Hedera TVL Tracker</PageTitle>

@using HBARTVLScanner.Web.Data
@using System.Timers
@using Radzen.Blazor
@using System.Globalization;
@inject TVLService TVLService
@inject IConfiguration Config

<div class="row px-4 pt-5 mt-0 text-center">
    <div class="col-lg-6 mx-auto">
        <svg width="100" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 200 200"><title>black-cutout</title><rect x="80.13" y="95.32" width="39.21" height="10.01" /><path d="M99.74,30.66a69.67,69.67,0,1,0,69.67,69.67A69.67,69.67,0,0,0,99.74,30.66m28.78,101h-9.18V112H80.13v19.61H71V69h9.18V88.65h39.21V69h9.18Z" /></svg>
        <h1 class="display-4 my-2">HBAR TVL Tracker</h1>
        <p class="lead">This tool provides basic insights into TVL in the Stader Labs Hedera liquidity pool.</p>
    </div>
</div>

@if (siteDown)
{
    <div class="row px-4 py-2 my-2 text-center">
        <div class="col-lg-6 mx-auto">
            <div class="alert alert-warning text-center" role="alert">
                <div>
                    The site is currently down for maintenance.
                    <br />
                    Check back soon!
                </div>
            </div>
        </div>
    </div>
}
else if (TVLSnapshot == null)
{
    <div class="row px-4 py-2 my-2 text-center">
        <div class="col-lg-6 mx-auto">
            <div class="spinner-border mt-4" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="row px-4 py-2 my-2 justify-content-center">
        <div class="col-lg-5">
            <div class="card text-center mb-4 mb-md-0">
                <div class="card-body">
                    <h5 class="card-title mb-3">TVL statistics</h5>
                    <h6 class="card-subtitle mb-3 text-muted">Live TVL: <span class="@AnimateClass">@LiveTVL.ToString("N8") ℏ</span></h6>
                    <p class="mb-0"><small class="card-text my-0"><strong>Last snapshot:</strong> @TVLSnapshot.SnapshotTVLValue.ToString("N8") ℏ at @TVLSnapshot.Date.ToString("yyyy-MM-dd HH:mm:ss UTC")</small></p>
                    <p class="mb-0 mt-2"><small class="card-text my-0 mt-1"><strong>24h change:</strong> <span style="color:green;">+ @TVLSnapshot.TwentyFourHrChange.ToString("N8") ℏ</span></small></p>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card text-center mb-4 mb-md-0">
                <div class="card-body">
                    <h5 class="card-title mb-3">Exchange rate and APY</h5>
                    <p class="mb-0"><small class="card-text my-0 mt-1"><strong>Exchange rate:</strong> <span>1 HBAR = ~@ExchangeRate HBARX</span></small></p>
                    <p class="mb-1 mt-1"><small class="card-text my-0 mt-1"><strong>Phase 3 emission rate:</strong> @emissionRate.ToString() ℏ</small></p>
                    <p class="mt-1 mb-0"><small class="card-text my-0"><strong>Estimate APY based on emission rate:</strong> <span style="color:green;"><strong>@phase3Apy%</strong></span></small></p>
                </div>
            </div>
        </div>
    </div>
    <div class="row px-4 py-2 my-2 justify-content-center">
        <div class="col-lg-10">
            <div class="card text-center mb-4 mb-md-0">
                <div class="card-header">
                    <span>The current HBAR price is <strong>$@HBARPrice.USD.ToString("N4")</strong></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="@(priceDown ? "color:red;" : "color:green;")">@(priceDown ? @<i class="bi bi-arrow-down-circle-fill"></i> : @<i class="bi arrow-up-circle-fill"></i>) @Math.Abs(@HBARPrice.TwentyFourHourChange).ToString("N1")%</span>
                </div>
                <div class="card-body">
                    <label for="hbarXValue" class="form-label">Enter your HBARX amount</label>
                    <input @bind="hbarXAmount" @oninput="@((e) => { hbarXAmount = !string.IsNullOrWhiteSpace(e.Value.ToString()) ? double.Parse(e.Value.ToString()) : 0;})" type="number" class="form-control" id="hbarXValue">
                    <div class="mt-5 calculations row justify-content-center">
                        <div class="calculated-stat col-lg-6">
                            <h3>Total HBAR</h3>
                            @if (hbarXAmount != 0)
                            {
                                <p>@((hbarXAmount / double.Parse(ExchangeRate)).ToString("N2")</p>
                            }
                            else
                            {
                                <p><i class="bi bi-three-dots"></i></p>
                            }
                        </div>
                        <div class="calculated-stat col-lg-6">
                            <h3>Total HBAR Value ($)</h3>
                            @if (hbarXAmount != 0)
                            {
                                <p>@(((hbarXAmount / double.Parse(ExchangeRate)) * HBARPrice.USD).ToString("C2", CultureInfo.GetCultureInfo("en-US"))</p>
                            }
                            else
                            {
                                <p><i class="bi bi-three-dots"></i></p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row px-4 py-2 my-2 justify-content-center">
        <div class="col-lg-10">
            <div class="card text-center mb-4 mb-md-0">
                <div class="card-body">
                    <RadzenChart>
                        <RadzenLineSeries Smooth="true" Data="RewardsWithoutFee" Title="Rewards" CategoryProperty="ConsensusDate" LineType="LineType.Dashed" ValueProperty="RewardAfterStaderFee">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MM/dd}" />
                        <RadzenValueAxis Formatter="@FormatReward">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Rewards after fee" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div>
    </div>
    <div class="row px-4 py-2 my-2 justify-content-center">
        <div class="col-lg-10">
            <div class="card text-center mb-4 mb-md-0">
                <div class="card-body">
                    <RadzenChart>
                        <RadzenLineSeries Smooth="true" Data="RewardsWithoutFee" Title="TVL" CategoryProperty="ConsensusDate" LineType="LineType.Dashed" ValueProperty="TVLAtReward">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MM/dd}" />
                        <RadzenValueAxis Formatter="@FormatReward">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="TVL at reward" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div>
    </div>
}


<div class="row px-4 pt-3 my-3 text-center">
    <div class="col-lg-6 mx-auto">
        <a class="text-decoration-none" href="https://t.me/StaderLabs_Hedera_Official">
            <img src="/images/icons8-telegram-app-30.png" />
            <small class="text-muted">Join the Stader Labs Hedera Official community on Telegram!</small>
        </a>
        <br />
        <a class="text-decoration-none" href="https://twitter.com/DJWorkshirt">
            <img src="/images/icons8-twitter-30.png" />
            <small class="text-muted">Having issues? Tweet me!</small>
        </a>
        <br />
        <br />
        <a class="mb-2" href="/privacy">
            <small class="text-muted">View this sites privacy policy</small>
        </a>
    </div>
</div>

@code {
    public TVLStats? TVLSnapshot { get; set; } = null;
    public IList<StakePoolReward> RewardsWithoutFee { get; set; }
    public IList<StakePoolRewardWithFee> RewardsWithFee { get; set; }
    public Price HBARPrice { get; set; }

    public double LiveTVL { get; set; }
    public string? ExchangeRate { get; set; }

    private int phaseTwoEmissions = 500000;
    private int phaseThreeMaxRewards = 50000000;
    private int phaseOneMax = 200000000;
    private int phaseTwoMax = 400000000;

    private string currentPhase = "Unknown";
    private string currentEmissions = "Unknown";
    private string currentEstimateAPY = "Unknown";

    private double sumTotalRewardsToDate;
    private double epochs;
    private double emissionRate;
    private string phase3Apy;

    private double hbarXAmount;

    private bool siteDown;
    private bool priceDown;

    private string AnimateClass { get; set; } = "";

    private Timer timer = new Timer(5000);

    protected override async Task OnInitializedAsync()
    {
        siteDown = Config.GetValue<bool>("SiteDown");
        if (!siteDown)
        {
            RewardsWithoutFee = await TVLService.GetStakingOnlyRewards();
            RewardsWithFee = await TVLService.GetRewardsWithStaderFee();
            TVLSnapshot = await TVLService.GetTVLAsync();
            LiveTVL = await TVLService.GetLiveTVL();
            ExchangeRate = await TVLService.GetCurrentExchangeRate();
            HBARPrice = await TVLService.GetHBARPrice();

            priceDown = HBARPrice.TwentyFourHourChange < 0;

            sumTotalRewardsToDate = RewardsWithFee.Where(r => !r.IsPhase3).Select(r => r.TotalReward).Sum();
            epochs = (new DateTime(2022, 07, 01) - new DateTime(2022, 04, 29)).TotalDays;

            emissionRate = (phaseThreeMaxRewards - sumTotalRewardsToDate) / epochs;

            phase3Apy = CalculateAPY(emissionRate, LiveTVL);

            timer.Elapsed += (sender, eventArgs) => GetLiveTVL();
            timer.AutoReset = true;
            timer.Start();
        }
    }

    private async void GetLiveTVL()
    {
        AnimateClass = "";
        await InvokeAsync(StateHasChanged);
        var newLiveTvl = await TVLService.GetLiveTVL();

        if (LiveTVL != newLiveTvl)
        {
            LiveTVL = newLiveTvl;
            AnimateClass = "animate";
        }

        await InvokeAsync(StateHasChanged);
    }

    private string FormatReward(object value)
    {
        return ((double)value).ToString() + "ℏ";
    }

    private string CalculateAPY(double emissions, double tvl)
    {
        var apy = ((emissions * 365) / tvl) * 100;
        return apy.ToString("N2");
    }

    private int CalculateRewards(int emissions, DateTime from, DateTime to)
    {
        var totalDays = (to - from).Days;
        return emissions * totalDays;
    }
}
